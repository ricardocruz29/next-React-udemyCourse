{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/ricardo/Desktop/next-React-udemyCourse/05-datafetching/pages/[id].js\";\n\nfunction ProductDetailPage(_ref) {\n  var loadedProduct = _ref.loadedProduct;\n  //since fallback is true, we are not guaranteed to have a loadedProduct at start. It can be post fetched.\n  if (!loadedProduct) return /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"...Loading\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 30\n  }, this);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: loadedProduct.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: loadedProduct.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_c = ProductDetailPage;\nexport var __N_SSG = true;\nexport default ProductDetailPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProductDetailPage\");","map":{"version":3,"sources":["/home/ricardo/Desktop/next-React-udemyCourse/05-datafetching/pages/[id].js"],"names":["ProductDetailPage","loadedProduct","title","description"],"mappings":";;;;AAGA,SAASA,iBAAT,OAA8C;AAAA,MAAjBC,aAAiB,QAAjBA,aAAiB;AAC5C;AACA,MAAI,CAACA,aAAL,EAAoB,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAEpB,sBACE;AAAA,4BACE;AAAA,gBAAKA,aAAa,CAACC;AAAnB;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA,gBAAID,aAAa,CAACE;AAAlB;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA,kBADF;AAMD;;KAVQH,iB;;AAsDT,eAAeA,iBAAf","sourcesContent":["import fs from \"fs\";\nimport path from \"path\";\n\nfunction ProductDetailPage({ loadedProduct }) {\n  //since fallback is true, we are not guaranteed to have a loadedProduct at start. It can be post fetched.\n  if (!loadedProduct) return <h1>...Loading</h1>;\n\n  return (\n    <>\n      <h1>{loadedProduct.title}</h1>\n      <p>{loadedProduct.description}</p>\n    </>\n  );\n}\n\nasync function getData() {\n  const filePath = path.join(process.cwd(), \"data\", \"dummy-backend.json\"); //current working directory -> root + get the dummy data\n  const jsonData = await fs.readFileSync(filePath);\n  return JSON.parse(jsonData);\n}\n\nexport async function getStaticProps(context) {\n  const productId = context.params.id;\n\n  const data = await getData();\n\n  if (!data) return { redirect: { destination: \"/no-data\" } }; //if some error happens, it can be redirected to a specific error page\n\n  const product = data.products.find((p) => p.id === productId);\n\n  if (!product) return { notFound: true }; //if there is no products, return to page 404\n\n  return {\n    props: {\n      loadedProduct: product,\n    },\n    revalidate: 10,\n  };\n}\n\nexport async function getStaticPaths() {\n  const data = await getData();\n\n  const ids = data.products.map((product) => product.id);\n  const pathsWithParams = ids.map((id) => ({ params: { id } })); //Creates an array with objects of type {params: {id: 'p1'}}\n\n  return {\n    paths: pathsWithParams,\n    fallback: true, //if fallback is true, it means that all the paths do not need to be here. If there was a p4, it would still work, but that would not be pre-generated. This is good for websites with millions of data, where it is more advantageous to only pre-render the frequently visited ones\n    /* possible values are:\n     false -> Error if there is not that product\n     true -> Client fetches the product. Needs to be validated in client code if there is a loadedProduct\n     'blocking' -> Longer wait, but is fetched by Next server. The page is only presented when it finishes fetching\n    */\n  };\n}\n\nexport default ProductDetailPage;\n"]},"metadata":{},"sourceType":"module"}