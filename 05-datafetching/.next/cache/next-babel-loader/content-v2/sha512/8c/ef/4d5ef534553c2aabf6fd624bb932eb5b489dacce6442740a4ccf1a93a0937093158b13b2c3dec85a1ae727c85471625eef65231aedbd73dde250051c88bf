{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/ricardo/Desktop/next-React-udemyCourse/05-datafetching/pages/[id].js\";\nimport fs from \"fs\";\nimport path from \"path\";\n\nfunction ProductDetailPage({\n  loadedProduct\n}) {\n  //since fallback is true, we are not guaranteed to have a loadedProduct at start. It can be post fetched.\n  if (!loadedProduct) return /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"...Loading\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 30\n  }, this);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: loadedProduct.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: loadedProduct.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\nasync function getData() {\n  const filePath = path.join(process.cwd(), \"data\", \"dummy-backend.json\"); //current working directory -> root + get the dummy data\n\n  const jsonData = await fs.readFileSync(filePath);\n  return JSON.parse(jsonData);\n}\n\nexport async function getStaticProps(context) {\n  const productId = context.params.id;\n  const data = await getData();\n  if (!data) return {\n    redirect: {\n      destination: \"/no-data\"\n    }\n  }; //if some error happens, it can be redirected to a specific error page\n\n  const product = data.products.find(p => p.id === productId);\n  if (!product) return {\n    notFound: true\n  }; //if there is no products, return to page 404\n\n  return {\n    props: {\n      loadedProduct: product\n    },\n    revalidate: 10\n  };\n}\nexport async function getStaticPaths() {\n  const data = await getData();\n  const ids = data.products.map(product => product.id);\n  const pathsWithParams = ids.map(id => ({\n    params: {\n      id\n    }\n  })); //Creates an array with objects of type {params: {id: 'p1'}}\n\n  return {\n    paths: pathsWithParams,\n    fallback: \"blocking\"\n    /* fallback possible values are:\n     false -> Error if there is not that product -> Good where there is not a lot of data to be pre-generated\n     true -> Client fetches the product. Needs to be validated in client code if there is a loadedProduct -> Good where there is million of data and we want to pre-render only the important one\n     'blocking' -> Longer wait, but is fetched by Next server. The page is only presented when it finishes fetching -> Good for the same case, but in this case, it is not presented an incomplete page that is not pre-rendered\n    */\n\n  };\n}\nexport default ProductDetailPage;","map":{"version":3,"sources":["/home/ricardo/Desktop/next-React-udemyCourse/05-datafetching/pages/[id].js"],"names":["fs","path","ProductDetailPage","loadedProduct","title","description","getData","filePath","join","process","cwd","jsonData","readFileSync","JSON","parse","getStaticProps","context","productId","params","id","data","redirect","destination","product","products","find","p","notFound","props","revalidate","getStaticPaths","ids","map","pathsWithParams","paths","fallback"],"mappings":";;;AAAA,OAAOA,EAAP,MAAe,IAAf;AACA,OAAOC,IAAP,MAAiB,MAAjB;;AAEA,SAASC,iBAAT,CAA2B;AAAEC,EAAAA;AAAF,CAA3B,EAA8C;AAC5C;AACA,MAAI,CAACA,aAAL,EAAoB,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAEpB,sBACE;AAAA,4BACE;AAAA,gBAAKA,aAAa,CAACC;AAAnB;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA,gBAAID,aAAa,CAACE;AAAlB;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA,kBADF;AAMD;;AAED,eAAeC,OAAf,GAAyB;AACvB,QAAMC,QAAQ,GAAGN,IAAI,CAACO,IAAL,CAAUC,OAAO,CAACC,GAAR,EAAV,EAAyB,MAAzB,EAAiC,oBAAjC,CAAjB,CADuB,CACkD;;AACzE,QAAMC,QAAQ,GAAG,MAAMX,EAAE,CAACY,YAAH,CAAgBL,QAAhB,CAAvB;AACA,SAAOM,IAAI,CAACC,KAAL,CAAWH,QAAX,CAAP;AACD;;AAED,OAAO,eAAeI,cAAf,CAA8BC,OAA9B,EAAuC;AAC5C,QAAMC,SAAS,GAAGD,OAAO,CAACE,MAAR,CAAeC,EAAjC;AAEA,QAAMC,IAAI,GAAG,MAAMd,OAAO,EAA1B;AAEA,MAAI,CAACc,IAAL,EAAW,OAAO;AAAEC,IAAAA,QAAQ,EAAE;AAAEC,MAAAA,WAAW,EAAE;AAAf;AAAZ,GAAP,CALiC,CAKiB;;AAE7D,QAAMC,OAAO,GAAGH,IAAI,CAACI,QAAL,CAAcC,IAAd,CAAoBC,CAAD,IAAOA,CAAC,CAACP,EAAF,KAASF,SAAnC,CAAhB;AAEA,MAAI,CAACM,OAAL,EAAc,OAAO;AAAEI,IAAAA,QAAQ,EAAE;AAAZ,GAAP,CAT8B,CASH;;AAEzC,SAAO;AACLC,IAAAA,KAAK,EAAE;AACLzB,MAAAA,aAAa,EAAEoB;AADV,KADF;AAILM,IAAAA,UAAU,EAAE;AAJP,GAAP;AAMD;AAED,OAAO,eAAeC,cAAf,GAAgC;AACrC,QAAMV,IAAI,GAAG,MAAMd,OAAO,EAA1B;AAEA,QAAMyB,GAAG,GAAGX,IAAI,CAACI,QAAL,CAAcQ,GAAd,CAAmBT,OAAD,IAAaA,OAAO,CAACJ,EAAvC,CAAZ;AACA,QAAMc,eAAe,GAAGF,GAAG,CAACC,GAAJ,CAASb,EAAD,KAAS;AAAED,IAAAA,MAAM,EAAE;AAAEC,MAAAA;AAAF;AAAV,GAAT,CAAR,CAAxB,CAJqC,CAI0B;;AAE/D,SAAO;AACLe,IAAAA,KAAK,EAAED,eADF;AAELE,IAAAA,QAAQ,EAAE;AACV;AACJ;AACA;AACA;AACA;;AAPS,GAAP;AASD;AAED,eAAejC,iBAAf","sourcesContent":["import fs from \"fs\";\nimport path from \"path\";\n\nfunction ProductDetailPage({ loadedProduct }) {\n  //since fallback is true, we are not guaranteed to have a loadedProduct at start. It can be post fetched.\n  if (!loadedProduct) return <h1>...Loading</h1>;\n\n  return (\n    <>\n      <h1>{loadedProduct.title}</h1>\n      <p>{loadedProduct.description}</p>\n    </>\n  );\n}\n\nasync function getData() {\n  const filePath = path.join(process.cwd(), \"data\", \"dummy-backend.json\"); //current working directory -> root + get the dummy data\n  const jsonData = await fs.readFileSync(filePath);\n  return JSON.parse(jsonData);\n}\n\nexport async function getStaticProps(context) {\n  const productId = context.params.id;\n\n  const data = await getData();\n\n  if (!data) return { redirect: { destination: \"/no-data\" } }; //if some error happens, it can be redirected to a specific error page\n\n  const product = data.products.find((p) => p.id === productId);\n\n  if (!product) return { notFound: true }; //if there is no products, return to page 404\n\n  return {\n    props: {\n      loadedProduct: product,\n    },\n    revalidate: 10,\n  };\n}\n\nexport async function getStaticPaths() {\n  const data = await getData();\n\n  const ids = data.products.map((product) => product.id);\n  const pathsWithParams = ids.map((id) => ({ params: { id } })); //Creates an array with objects of type {params: {id: 'p1'}}\n\n  return {\n    paths: pathsWithParams,\n    fallback: \"blocking\",\n    /* fallback possible values are:\n     false -> Error if there is not that product -> Good where there is not a lot of data to be pre-generated\n     true -> Client fetches the product. Needs to be validated in client code if there is a loadedProduct -> Good where there is million of data and we want to pre-render only the important one\n     'blocking' -> Longer wait, but is fetched by Next server. The page is only presented when it finishes fetching -> Good for the same case, but in this case, it is not presented an incomplete page that is not pre-rendered\n    */\n  };\n}\n\nexport default ProductDetailPage;\n"]},"metadata":{},"sourceType":"module"}